{"version":3,"sources":["images/chrome-logo.png","images/firefox-logo.png","images/microsoft-edge-logo.png","images/safari-icon.png","images/title.png","images/question.png","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","hidden","react_default","a","createElement","id","onChange","onClick","className","src","alt","height","width","blanksrc","array","chrome","firefox","edge","safari","scramble","j","i","Math","floor","random","temp","App","state","global","correct","cardOne","cardTwo","1","2","3","4","5","6","7","8","changeState","key","value","Promise","resolve","reject","_this2","setState","Object","defineProperty","assertThisInitialized","default","rotateCard","event","_this2$setState2","target","then","foo","alert","setTimeout","_this3","this","number","title","map","includes","src_components_Card","bind","toString","blank","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ab5b4b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chrome-logo.8daafc83.png\";","module.exports = __webpack_public_path__ + \"static/media/firefox-logo.8b26e869.png\";","module.exports = __webpack_public_path__ + \"static/media/microsoft-edge-logo.6cf8affe.png\";","module.exports = __webpack_public_path__ + \"static/media/safari-icon.ff95c31a.png\";","module.exports = __webpack_public_path__ + \"static/media/title.c19b6d94.png\";","module.exports = __webpack_public_path__ + \"static/media/question.7736e08b.png\";","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => {\n  return (!props.hidden ?\n    <img id={props.id} onChange={props.onChange} onClick={props.onClick} className=\"Card\" src={props.blanksrc} alt={props.alt} height=\"256\" width=\"256\" />\n  :\n    <img id={props.id} onChange={props.onChange} onClick={props.onClick} className=\"Card\" src={props.src} alt={props.alt} height=\"256\" width=\"256\" />\n  )\n}\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport title from './images/title.png';\nimport chrome from './images/chrome-logo.png';\nimport firefox from './images/firefox-logo.png';\nimport edge from './images/microsoft-edge-logo.png';\nimport safari from './images/safari-icon.png';\nimport blank from './images/question.png';\n// import correct from './sounds/correct.mp3';\n// import wrong from './sounds/wrong.mp3';\n// import winner from './sounds/winner.mp3';\n\nconst array = [chrome, chrome, firefox, firefox, edge, edge, safari, safari];\n\nconst changeState = function(key,value) {\n  return new Promise((resolve, reject) => {\n    this.setState({ [key]: value });\n    resolve(this.state[key]);\n    if(!this.state[key]) { reject(\"NO KEY PRESENT\"); }\n  })\n};\n\nconst scramble = () => {\n  for(let j = 0; j < 8; j++) {\n    for(let i = 0; i < 8; i++) {\n      let a = Math.floor(Math.random() * Math.floor(8));\n      let temp = array[i];\n      array[i] = array[a];\n      array[a] = temp;\n    }\n  }\n}\n\nscramble();\n\n\nclass App extends Component {\n  state = {\n    \"global\": 0,\n    \"correct\": 0,\n    \"cardOne\": \"\",\n    \"cardTwo\": \"\",\n    \"1\": false,\n    \"2\": false,\n    \"3\": false,\n    \"4\": false,\n    \"5\": false,\n    \"6\": false,\n    \"7\": false,\n    \"8\": false\n  }\n\n  // soundCorrect = new Audio(correct);\n  // soundWrong = new Audio(wrong);\n  // soundWinner = new Audio(winner);\n\n  changeState = (key, value) => {\n    return new Promise((resolve, reject) => {\n      this.setState({ [key]: value });\n      // console.log(this.state[key]);\n      resolve(this);\n      if(!this.state[key]) { reject(\"NO KEY PRESENT\"); }\n    })\n  }\n\n  default = () => {\n    this.setState({\n      \"global\": 0,\n      \"correct\": 0,\n      \"cardOne\": \"\",\n      \"cardTwo\": \"\",\n      \"1\": false,\n      \"2\": false,\n      \"3\": false,\n      \"4\": false,\n      \"5\": false,\n      \"6\": false,\n      \"7\": false,\n      \"8\": false\n    });\n  }\n\n  rotateCard = (event) => {\n    this.setState({\n      [event.target.id]: true,\n      \"global\": this.state.global += 1,\n    });\n\n    if(this.state.global === 1) {\n      // this.setState({ \"cardOne\": event.target.alt })\n      this.changeState(\"cardOne\", event.target.alt).then(function(event) {\n      });\n    }\n    else if(this.state.global === 2) {\n      this.changeState(\"cardTwo\", event.target.alt).then(function(event) {\n        if(event.state.cardOne == event.state.cardTwo) {\n          event.setState({\n            \"global\": 0,\n          });\n\n          event.changeState(\"correct\", event.state.correct += 1).then(function(foo) {\n            if(foo.state.correct == 4) {\n              // foo.soundWinner.play();\n              alert(\"WINNER\");\n              scramble();\n              setTimeout(foo.default, 1500);\n            } else {\n              // foo.soundCorrect.play();\n            }\n          })\n        } else {\n          // event.soundWrong.play();\n          setTimeout(event.default, 500);\n        }\n      });\n    }\n  }\n\n  render() {\n    let number = 0;\n    return (\n      <div className=\"App\">\n        <img src={title} alt=\"Title\" />\n        <div>\n          {array.map(a => {\n          number += 1;\n          let temp = \"\";\n          a.includes(\"chrome\") ? temp = \"chrome\"\n          : a.includes(\"firefox\") ? temp = \"firefox\"\n          : a.includes(\"safari\") ? temp = \"safari\"\n          : a.includes(\"microsoft\") ? temp = \"edge\"\n          : temp = null;\n          return <Card key={number} onClick={this.rotateCard.bind(number)} alt={temp} id={number.toString()} hidden={this.state[number]} blanksrc={blank} src={a} />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}